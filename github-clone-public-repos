#!/bin/bash

# Check if jq is installed
if ! command -v jq >/dev/null; then
    echo "Error: 'jq' is not installed. Please install 'jq' before running this script."
    exit 1
fi

# Check if the username/URL parameter is provided
if [ $# -eq 0 ]; then
    echo "Error: GitHub username or URL is missing."
    echo "Usage: $0 <username_or_url> [target_directory]"
    exit 1
fi

# Function to extract the GitHub username from a URL
extract_username_from_url() {
    local url=$1
    local username=""

    # Extract the username from the URL
    if [[ $url == *"://"* ]]; then
        username=$(echo "$url" | awk -F/ '{print $4}')
    elif [[ $url == *"/"* ]]; then
        username=$(echo "$url" | awk -F/ '{print $2}')
    else
        username="$url"
    fi

    echo "$username"
}

# Function to extract the repository name from a URL
extract_repo_name_from_url() {
    local url=$1
    local repo_name=""

    if [[ $url =~ github\.com/[^/]+/([^/]+)/?.* ]]; then
        repo_name=${BASH_REMATCH[1]}
    fi

    echo "$repo_name"
}

# Set the target directory or fallback to the current directory
TARGET_DIR="${2:-$(pwd)}"
mkdir "$TARGET_DIR" -p

# Extract the GitHub username or URL from the parameter
PARAMETER="$1"
USERNAME=$(extract_username_from_url "$PARAMETER")

if [ -z "$USERNAME" ]; then
  # The input is a username
  USERNAME="$PARAMETER"
fi

# Fetch the repository URLs using the GitHub API
REPO_URLS=$(curl -s "https://api.github.com/users/$USERNAME/repos?type=public&per_page=1000" | jq -r '.[].clone_url')

# Check if repositories are found
if [ -z "$REPO_URLS" ]; then
    echo "No public repositories found for the GitHub user: $USERNAME"
    exit 1
fi

# Iterate over each repository URL
for URL in $REPO_URLS; do
    # Extract the repository name from the URL
    REPO_NAME=$(basename -s .git "$URL")
    echo
    echo "Processing '$REPO_NAME'..."
    echo "============================================"

    # Check if the directory already exists
    if [ -d "$TARGET_DIR/$REPO_NAME" ]; then
        echo "Repository '$REPO_NAME' already exists in '$TARGET_DIR'. Updating..."
        cd "$TARGET_DIR/$REPO_NAME"
        git pull
        cd "$TARGET_DIR"
        echo
    else
        echo "Cloning repository: $REPO_NAME"
        git clone "$URL" "$TARGET_DIR/$REPO_NAME"
        echo
    fi
done
